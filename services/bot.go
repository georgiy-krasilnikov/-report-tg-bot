package services

import (
	"fmt"

	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (h *Handler) Start(chatID int64) error {
	msg := tg.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! üòÑ\n\n–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Ç–æ, –¥–ª—è —á–µ–≥–æ —Ç–µ–±–µ –Ω—É–∂–µ–Ω —Ä–∞–ø–æ—Ä—Ç, –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–æ–≤ –ø–æ—Å–ª–µ \"–í —Å–≤—è–∑–∏ —Å\". –ü—Ä–∏–º–µ—Ä: —Ä–µ–¥–∞–∫—Ç–æ—Ä—Å–∫–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Ñ–µ—Å—Ç–∏–≤–∞–ª—Å—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ \"–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –≤–µ—Å–Ω–∞\".")
	if _, err := h.Send(msg); err != nil {
		return fmt.Errorf("failed to send 'start' msg: %s", err.Error())
	}

	return nil
}

func (h *Handler) Next(chatID int64, s string) error {
	if s == "" {
		return fmt.Errorf("s can't be empty")
	}
	if err := h.Add(s); err != nil {
		return fmt.Errorf("failed to add data: %s", err.Error())
	}
	fmt.Println(h.data)

	var msg tg.MessageConfig

	switch true {
	case h.data.How == "":
		msg = tg.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, —á–µ—Ä–µ–∑ —á—Ç–æ —Ç—ã –±—É–¥–µ—à—å –≤—ã–Ω–æ—Å–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã:")
		msg.ReplyMarkup = tg.NewInlineKeyboardMarkup(
			tg.NewInlineKeyboardRow(
				tg.NewInlineKeyboardButtonData("–ß–µ—Ä–µ–∑ –ö–ü–ü ‚Ññ1", "–ö–ü–ü ‚Ññ1"),
				tg.NewInlineKeyboardButtonData("–ß–µ—Ä–µ–∑ –≥–∞—Ä–∞–∂", "–≥–∞—Ä–∞–∂–Ω—ã–π –≤—ä–µ–∑–¥"),
			),
		)
	case h.data.Date == "":
		msg = tg.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤—ã–Ω–æ—Å–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: –¥–¥.–º–º.–≥–≥–≥–≥. –ü—Ä–∏–º–µ—Ä: 31.12.2022.")
	case h.data.Time == "":
		msg = tg.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤—ã–Ω–æ—Å–∞. –ü—Ä–∏–º–µ—Ä: 9:00 –¥–æ 12:00.")
	case h.data.Count == 0:
		msg = tg.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –Ω–∞—Å 1 —è—â–∏–∫, 2 —Å—Ç—É–ª–∞, 1 —Å—Ç–æ–ª: 3 (—Ç–∞–∫ –∫–∞–∫ 3 —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤)")
	case h.data.Items == nil:
		msg = tg.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –≤—ã–Ω–æ—Å–∏—Ç—å. –î–ª—è —Ä–∞–ø–æ—Ä—Ç–∞ –Ω—É–∂–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ü—Ä–∏–º–µ—Ä: –°—Ç—É–ª, 2. –ï—Å–ª–∏ —É —Ç–µ–±—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤, —Ç–æ –ø–∏—à–∏ –∏—Ö —Ç–∞–∫: –°—Ç—É–ª, 2, –°—Ç–æ–ª, 1 –∏ —Ç.–ø.")
	default:
		msg = tg.NewMessage(chatID, "–ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ.")
	}

	if _, err := h.Send(msg); err != nil {
		return fmt.Errorf("failed to send 'next' msg: %s", err.Error())
	}

	return nil
}

func (h *Handler) Create(chatID int64) error {
	if err := h.CreateDocument(); err != nil {
		return fmt.Errorf("failed to create replace document: %s", err.Error())
	}

	msg := tg.NewDocument(chatID, tg.FilePath("–†–∞–ø–æ—Ä—Ç."+h.data.Date+".docx"))
	if _, err := h.Send(msg); err != nil {
		return fmt.Errorf("failed to send 'create' msg: %s", err.Error())
	}

	return nil
}
