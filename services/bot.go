package services

import (
	"fmt"
	"strings"

	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func (h *Handler) Start(chatID int64) error {
	msg := tg.NewMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å.")
	msg.ReplyMarkup = tg.NewInlineKeyboardMarkup(
		tg.NewInlineKeyboardRow(
			tg.NewInlineKeyboardButtonData("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–ø–æ—Ä—Ç", "/create"),
			tg.NewInlineKeyboardButtonData("–í—ã–±—Ä–∞—Ç—å —Ä–∞–ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞", "/list"),
		),
	)

	if _, err := h.Send(msg); err != nil {
		return fmt.Errorf("failed to send 'start' msg: %s", err.Error())
	}

	return nil
}

func (h *Handler) Next(chatID int64, s string) error {
	if err := h.AddData(s); err != nil {
		return fmt.Errorf("failed to add data: %s", err.Error())
	}

	var msg tg.MessageConfig

	switch true {
	case s == "":
		return fmt.Errorf("s can't be empty")
	case s == "/list":
		msg = tg.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Ä–∞–ø–æ—Ä—Ç:")
		kbrd, err := NewKeyboard()
		if err != nil {
			return fmt.Errorf("failed to create keyboard: %s", err.Error())
		}
		msg.ReplyMarkup = kbrd

	case strings.Contains(s, "docx"):
		msg = tg.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–ø–æ—Ä—Ç–æ–º:")
		msg.ReplyMarkup = tg.NewInlineKeyboardMarkup(
			tg.NewInlineKeyboardRow(
				tg.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞–ø–æ—Ä—Ç", "/get"),
				tg.NewInlineKeyboardButtonData("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–ø–æ—Ä—Ç", "/edit"),
			),
		)

	case s == "/get":
		msg := tg.NewDocument(chatID, tg.FilePath("docs/"+h.doc.DocName))
		msg.Caption = "–í–æ—Ç —Ç–≤–æ–π —Ä–∞–ø–æ—Ä—Ç üëá"
		if _, err := h.Send(msg); err != nil {
			return fmt.Errorf("failed to send msg with document: %s", err.Error())
		}

	case s == "/edit":
		if err := h.SendEditMessage(chatID); err != nil {
			return fmt.Errorf("error in 'edit' func: %s", err.Error())
		}
		return nil

	case s == "/create":
		msg = tg.NewMessage(chatID, "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç–µ–±–µ –Ω—É–∂–µ–Ω —Ä–∞–ø–æ—Ä—Ç, –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å–ª–æ–≤ –ø–æ—Å–ª–µ _–í —Å–≤—è–∑–∏ —Å_. *–ü—Ä–∏–º–µ—Ä:* _—Ä–µ–¥–∞–∫—Ç–æ—Ä—Å–∫–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Ñ–µ—Å—Ç–∏–≤–∞–ª—Å—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ \"–°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –≤–µ—Å–Ω–∞\"_.")

	case h.data.How == "" && h.data.Event != "":
		msg = tg.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Ç—ã –±—É–¥–µ—à—å –≤—ã–Ω–æ—Å–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã:")
		msg.ReplyMarkup = tg.NewInlineKeyboardMarkup(
			tg.NewInlineKeyboardRow(
				tg.NewInlineKeyboardButtonData("–ß–µ—Ä–µ–∑ –ö–ü–ü ‚Ññ1", "–ö–ü–ü ‚Ññ1"),
				tg.NewInlineKeyboardButtonData("–ß–µ—Ä–µ–∑ –≥–∞—Ä–∞–∂", "–≥–∞—Ä–∞–∂–Ω—ã–π –≤—ä–µ–∑–¥"),
			),
		)

	case s == "/items":
		msg = tg.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤:")
		msg.ReplyMarkup = tg.NewInlineKeyboardMarkup(
			tg.NewInlineKeyboardRow(
				tg.NewInlineKeyboardButtonData("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã", "/delete"),
				tg.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", "/add"),
			),
		)
	case s == "/add":

	case s == "/delete":

	case (h.data.Date == "" && h.data.How != "") || s == "/data":
		msg = tg.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤—ã–Ω–æ—Å–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: _–¥–¥.–º–º.–≥–≥–≥–≥_. *–ü—Ä–∏–º–µ—Ä:* _31.12.2022_.")

	case h.data.Time == "" && h.data.Date != "":
		msg = tg.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤—ã–Ω–æ—Å–∞. *–ü—Ä–∏–º–µ—Ä:* _9:00 –¥–æ 12:00_.")

	case (h.data.Count == 0 && h.data.Time != "") || s == "/add":
		msg = tg.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. *–ü—Ä–∏–º–µ—Ä:* –µ—Å–ª–∏ —É –Ω–∞—Å 1 —è—â–∏–∫, 2 —Å—Ç—É–ª–∞ –∏ 1 —Å—Ç–æ–ª: _3_, –µ—Å–ª–∏ —É –Ω–∞—Å 3 —Å—Ç—É–ª–∞, —Ç–æ: _1_.")

	case h.data.Items == nil && h.data.Count != 0:
		msg = tg.NewMessage(chatID, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–æ–±–∏—Ä–∞–µ—à—å—Å—è –≤—ã–Ω–æ—Å–∏—Ç—å. –î–ª—è —Ä–∞–ø–æ—Ä—Ç–∞ –Ω—É–∂–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. *–ü—Ä–∏–º–µ—Ä:* _–°—Ç—É–ª, 2_. –ï—Å–ª–∏ —É —Ç–µ–±—è *–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤*, —Ç–æ –ø–∏—à–∏ –∏—Ö —Ç–∞–∫: _–°—Ç—É–ª, 2, –°—Ç–æ–ª, 1_.")

	case h.data.Items != nil:
		if err := h.SendDocument(chatID); err != nil {
			return fmt.Errorf("failed to send document: %s", err.Error())
		}
		return nil

	default:
		msg = tg.NewMessage(chatID, "–Ø –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ.")
	}
	msg.ParseMode = "markdown"

	if _, err := h.Send(msg); err != nil {
		return fmt.Errorf("failed to send 'next' msg: %s", err.Error())
	}

	return nil
}

func (h *Handler) SendDocument(chatID int64) error {
	if err := h.CreateDocument(); err != nil {
		return fmt.Errorf("failed to create replace document: %s", err.Error())
	}

	msg := tg.NewDocument(chatID, tg.FilePath("docs/"+h.doc.DocName))
	msg.Caption = "–í–æ—Ç —Ç–≤–æ–π —Ä–∞–ø–æ—Ä—Ç üëá"
	if _, err := h.Send(msg); err != nil {
		return fmt.Errorf("failed to send msg with document: %s", err.Error())
	}

	return nil
}

func (h *Handler) SendEditMessage(chatID int64) error {
	msg := tg.NewDocument(chatID, tg.FilePath("docs/"+h.doc.DocName))
	msg.Caption = "–í–æ—Ç –∫–∞–∫–æ–π —Ç–≤–æ–π —Ä–∞–ø–æ—Ä—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Å–µ–π—á–∞—Å. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"
	msg.ReplyMarkup = tg.NewInlineKeyboardMarkup(
		tg.NewInlineKeyboardRow(
			tg.NewInlineKeyboardButtonData("–î–∞—Ç—É", "/data"),
			tg.NewInlineKeyboardButtonData("–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤", "/items"),
		),
	)

	if _, err := h.Send(msg); err != nil {
		return fmt.Errorf("failed to send msg with document: %s", err.Error())
	}

	return nil
}
